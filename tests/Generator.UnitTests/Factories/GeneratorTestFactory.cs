using NeverNull.Generator.UnitTests.Constants;

namespace NeverNull.Generator.UnitTests.Factories;

internal static class GeneratorTestFactory
{
    internal static string CreateSimpleClassSourceWithNeverNullField(string fieldType, string fieldName, string access = "public", List<string>? usings = null, string? initializer = null)
    {
        if (string.IsNullOrWhiteSpace(fieldType) || string.IsNullOrWhiteSpace(fieldName))
        {
            return GeneratorTestConstants.SimpleClassEmptySource;
        }

        var simpleClassSource = GeneratorTestConstants.SimpleClassEmptySource;
        if (usings != null && usings.Count > 0)
        {
            var usingStatements = string.Join(Environment.NewLine, usings.Select(x => $"using {x};"));
            simpleClassSource = $$"""
{{usingStatements}}

{{simpleClassSource}}
""";
        }

        var fieldInitializer = string.Join(" ", access, fieldType, fieldName, ";");
        if (!string.IsNullOrWhiteSpace(initializer))
        {
            fieldInitializer = string.Concat(string.Join(" = ", string.Join(" ", access, fieldType, fieldName), initializer), ";");
        }

        return $$"""
{{simpleClassSource.TrimEnd(';')}}
{
    [NeverNull]
    {{fieldInitializer}}
}
""";
    }

    internal static string GetExpectedGeneratedSimpleClassSource(string fieldType, string fieldName, string fieldAccess = "public")
    {
        var privateAccessor = fieldAccess.Equals("static", StringComparison.OrdinalIgnoreCase)
            ? "private static"
            : "private";
        var publicAccessor = fieldAccess.Equals("static", StringComparison.OrdinalIgnoreCase)
            ? "public static"
            : "public";
        var initializationAccessor = fieldAccess.Equals("static", StringComparison.OrdinalIgnoreCase)
            ? "static"
            : "public";
        var initializer = fieldType.Equals("string", StringComparison.OrdinalIgnoreCase)
            ? "string.Empty"
            : $"new {fieldType}()";

        return $$"""
// <auto-generated/>
namespace MyNamespace;

public partial class {{GeneratorTestConstants.SimpleClassName}}
{
    {{privateAccessor}} {{fieldType}} _NeverNull_{{fieldName}};

    {{publicAccessor}} {{fieldType}} NeverNull_{{fieldName}}
    {
        get => _NeverNull_{{fieldName}} ?? (_NeverNull_{{fieldName}} = {{initializer}});
        set => _NeverNull_{{fieldName}} = value ?? {{initializer}};
    }

    {{initializationAccessor}} {{GeneratorTestConstants.SimpleClassName}}()
    {
        {{fieldName}} = NeverNull_{{fieldName}};
    }
}
""";
    }

    internal static string GetGeneratedSourceName(string fieldName)
        => $"{GeneratorTestConstants.SimpleClassName}_{fieldName}.NeverNull.g.cs";
}
